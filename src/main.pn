//
// Part of corn
// Copyright (c) 2022 Sander in 't Veld
// License: MIT
//

$"wasm4.pn"

// penne_logo
const PENNE_LOGO_WIDTH: u32 = 32;
const PENNE_LOGO_HEIGHT: u32 = 16;
const PENNE_LOGO_FLAGS: u32 = 1; // BLIT_2BPP

const PENNE_LOGO: [128]u8 = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x00, 0x21, 0x55, 0x55, 0x55, 0x55, 0x54, 0x20,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x85, 0x55, 0x55,
	0x55, 0x50, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
	0x02, 0x15, 0x55, 0x55, 0x40, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x08, 0x55, 0x55, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x2a, 0xaa, 0xaa, 0xaa,
	0xaa, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

fn draw_penne_logo(x: i32, y: i32)
{
	DRAW_COLORS = 0x11;
	rect(x - 60, y - 7, 120, 21);

	DRAW_COLORS = 3;
	text("PENNE", x - 38, y);

	DRAW_COLORS = 0x0431;
	blit(PENNE_LOGO, x + 5, y - 5, PENNE_LOGO_WIDTH, PENNE_LOGO_HEIGHT,
		PENNE_LOGO_FLAGS);
}

/// Soundtrack: *corn_title_theme*
fn play_corn_title_theme_track_1(t: usize, volume: u32)
{
	var sequence: []usize = [3,1,3,1];
	var bar = t / 224;
	var pattern = sequence[bar % |sequence|];
	if pattern == 1
	{
		play_corn_title_theme_track_1_pattern_1(t, volume);
	}
	if pattern == 2
	{
		play_corn_title_theme_track_1_pattern_2(t, volume);
	}
	if pattern == 3
	{
		play_corn_title_theme_track_1_pattern_3(t, volume);
	}
}

fn play_corn_title_theme_track_1_pattern_1(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 7
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 21
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 35
	{
		tone(660, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 49
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

fn play_corn_title_theme_track_1_pattern_2(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 42
	{
		tone(490, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 70
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 126
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 154
	{
		tone(660, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 182
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

fn play_corn_title_theme_track_1_pattern_3(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 21
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 35
	{
		tone(1000, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 49
	{
		tone(780, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 133
	{
		tone(490, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 147
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 175
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 189
	{
		tone(660, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 203
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

pub fn play_corn_title_theme_track_2(t: usize, volume: u32)
{
	var sequence: []usize = [1,1,1,1];
	var bar = t / 224;
	var pattern = sequence[bar % |sequence|];
	if pattern == 1
	{
		play_corn_title_theme_track_2_pattern_1(t, volume);
	}
}

fn play_corn_title_theme_track_2_pattern_1(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 7
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 21
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 35
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 49
	{
		tone(390, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 119
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 133
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 147
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 161
	{
		tone(390, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
}

fn play_title_theme(t: usize, volume: u32)
{
	play_corn_title_theme_track_1(t, volume);
	play_corn_title_theme_track_2(t, volume);
}

fn i32_from_usize(x: usize) -> i32
{
	// No integer casts yet...
	var y = 0;
	var xx = 0;
	{
		if xx == x
			goto return;
		y = y + 1;
		xx = xx + 1;
		loop;
	}
	return: y
}

fn reflect(horizon: usize, height: i32, t: usize)
{
	var h = 1;
	var ysrc = horizon;
	var ydst = horizon;
	var noise = 6 * t;
	{
		ysrc = ysrc - 2;
		ydst = ydst + 1;
		var jitter = noise % 91;
		var x = 0;
		var xdst = -1 + jitter % 3;
		{
			if x == 40
				goto nextrow;
			if xdst < 0
				goto nextpixel;
			if xdst >= 40
				goto nextpixel;
			FRAMEBUFFER[ydst * 40 + xdst] = FRAMEBUFFER[ysrc * 40 + x];
			nextpixel:
			x = x + 1;
			xdst = xdst + 1;
			loop;
		}
		nextrow:
		h = h + 1;
		if h == height
			goto end;
		noise = noise + 55;
		loop;
	}
	end:
}

// We don't have mutable globals yet, but we do have a heap.
const TIME: &usize = 0xF800;
const PREVIOUS_GAMEPAD: &u8 = 0xF101;
const MUSIC_ENABLED: &bool = 0xF300;

pub extern fn start()
{
	TIME = 0;
	PREVIOUS_GAMEPAD = 0;
	MUSIC_ENABLED = !true;
}

pub extern fn update()
{
	PALETTE[0] = 0x211e20;
	PALETTE[1] = 0x66605c;
	PALETTE[2] = 0xff924f;
	PALETTE[3] = 0xffd191;

	DRAW_COLORS = 0x44;
	rect(0, 0, SCREEN_SIZE, 100);

	DRAW_COLORS = 3;
	oval(68, 88, 24, 24);
	hline(0, 100, SCREEN_SIZE);

	DRAW_COLORS = 0x44;
	rect(0, 101, SCREEN_SIZE, SCREEN_SIZE - 101);

	reflect(100, 20, TIME);

	var gamepad = GAMEPAD1;
	if gamepad & BUTTON_1 != 0
	{
		// TODO start the game
	}
	if gamepad & BUTTON_2 != 0
	{
		if PREVIOUS_GAMEPAD & BUTTON_2 == 0
		{
			MUSIC_ENABLED = !MUSIC_ENABLED;
		}
	}

	if MUSIC_ENABLED == true
	{
		play_title_theme(TIME, 100);
	}

	DRAW_COLORS = 1;
	text("It's Corn!", 40, 40);

	DRAW_COLORS = 1;
	text("X: START", 16, 130);
	if MUSIC_ENABLED == true
	{
		text("Z: MUSIC OFF", 16, 140);
	}
	else
	{
		text("Z: MUSIC ON", 16, 140);
	}

	// Enforce 160x144 letterbox of GBJAM.
	DRAW_COLORS = 0x11;
	rect(0, 0, SCREEN_SIZE, 8);
	rect(0, 152, SCREEN_SIZE, 8);

	// Advance time.
	TIME = TIME + 1;
	PREVIOUS_GAMEPAD = gamepad;
}
