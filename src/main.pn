//
// Part of corn
// Copyright (c) 2022 Sander in 't Veld
// License: MIT
//

$"wasm4.pn"
$"sprites.pn"

fn i32_from_usize(x: usize) -> i32
{
	// No integer casts yet...
	var y = 0;
	var xx = 0;
	{
		if xx == x
			goto return;
		y = y + 1;
		xx = xx + 1;
		loop;
	}
	return: y
}

fn u32_from_usize(x: usize) -> u32
{
	// No integer casts yet...
	var y = 0;
	var xx = 0;
	{
		if xx == x
			goto return;
		y = y + 1;
		xx = xx + 1;
		loop;
	}
	return: y
}

fn draw_racer(x: i32, y: i32, frame: u32)
{
	blitSub(RACER_SHEET, x + 1 - 12, y + 1 - 24, 24, 24,
		frame * 24, 0, RACER_SHEET_WIDTH, RACER_SHEET_FLAGS);
}

fn draw_corn(x: i32, y: i32, scaled_distance: usize)
{
	DRAW_COLORS = 0x4210;
	var frame = 6;
	if scaled_distance < 6
	{
		frame = u32_from_usize(scaled_distance);
	}
	blitSub(CORN_SHEET, x + 1 - 8, y + 1 - 8, 16, 16,
		frame * 16, 0, CORN_SHEET_WIDTH, CORN_SHEET_FLAGS);
}

fn draw_titlescreen_background(x: i32, y: i32)
{
	DRAW_COLORS = 0x3210;
	blit(TITLESCREEN, x, y, TITLESCREEN_WIDTH, TITLESCREEN_HEIGHT,
		TITLESCREEN_FLAGS);
}

fn draw_penne_logo(x: i32, y: i32)
{
	DRAW_COLORS = 0x11;
	rect(x - 60, y - 7, 120, 21);

	DRAW_COLORS = 3;
	text("PENNE", x - 38, y);

	DRAW_COLORS = 0x0431;
	blit(PENNE_LOGO, x + 5, y - 5, PENNE_LOGO_WIDTH, PENNE_LOGO_HEIGHT,
		PENNE_LOGO_FLAGS);
}

/// Soundtrack: *corn_title_theme*
fn play_corn_title_theme_track_1(t: usize, volume: u32)
{
	var sequence: []usize = [3,1,3,1];
	var bar = t / 224;
	var pattern = sequence[bar % |sequence|];
	if pattern == 1
	{
		play_corn_title_theme_track_1_pattern_1(t, volume);
	}
	if pattern == 2
	{
		play_corn_title_theme_track_1_pattern_2(t, volume);
	}
	if pattern == 3
	{
		play_corn_title_theme_track_1_pattern_3(t, volume);
	}
}

fn play_corn_title_theme_track_1_pattern_1(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 7
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 21
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 35
	{
		tone(660, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 49
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

fn play_corn_title_theme_track_1_pattern_2(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 42
	{
		tone(490, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 70
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 126
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 154
	{
		tone(660, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 182
	{
		tone(700, 14 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

fn play_corn_title_theme_track_1_pattern_3(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 21
	{
		tone(260, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 35
	{
		tone(1000, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 49
	{
		tone(780, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 133
	{
		tone(490, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 147
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 175
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 189
	{
		tone(660, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
	if tt == 203
	{
		tone(700, 7 << 8, volume * 60 / 100, TONE_PULSE2 | TONE_MODE3);
	}
}

pub fn play_corn_title_theme_track_2(t: usize, volume: u32)
{
	var sequence: []usize = [1,1,1,1];
	var bar = t / 224;
	var pattern = sequence[bar % |sequence|];
	if pattern == 1
	{
		play_corn_title_theme_track_2_pattern_1(t, volume);
	}
}

fn play_corn_title_theme_track_2_pattern_1(t: usize, volume: u32)
{
	var tt = t % 224;
	if tt == 7
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 21
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 35
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 49
	{
		tone(390, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 119
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 133
	{
		tone(130, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 147
	{
		tone(520, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
	if tt == 161
	{
		tone(390, 7 << 8, volume * 60 / 100, TONE_TRIANGLE | TONE_MODE1);
	}
}

fn play_title_theme(t: usize, volume: u32)
{
	play_corn_title_theme_track_1(t, volume);
	play_corn_title_theme_track_2(t, volume);
}

fn reflect(horizon: usize, height: i32, t: usize)
{
	var mask = 0b10101010;
	var h = 1;
	var ysrc = horizon;
	var ydst = horizon;
	var noise = 6 * t;
	{
		ysrc = ysrc - 2;
		ydst = ydst + 1;
		var jitter = noise % 91;
		var x = 0;
		var xdst = -1 + jitter % 3;
		var pixel_data;
		var dark;
		{
			if x == 40
				goto nextrow;
			if xdst < 0
				goto nextpixel;
			if xdst >= 40
				goto nextpixel;
			pixel_data = FRAMEBUFFER[ysrc * 40 + x];
			dark = !pixel_data & mask;
			dark = dark >> 1;
			pixel_data = pixel_data | dark;
			FRAMEBUFFER[ydst * 40 + xdst] = pixel_data;
			nextpixel:
			x = x + 1;
			xdst = xdst + 1;
			loop;
		}
		nextrow:
		h = h + 1;
		if h == height
			goto end;
		noise = noise + 55;
		loop;
	}
	end:
}

// We don't have mutable globals yet, but we do have a heap.
const TIME: &usize = 0xF700;
const COMBO_LEVEL: &usize = 0xF708;
const BOOST_REMAINING: &usize = 0xF710;
const BOOST_COOLDOWN: &usize = 0xF718;
const DISTANCE: &usize = 0xF720;
const SCORE: &u32 = 0xF400;
const COMBO: &u32 = 0xF404;
const PREVIOUS_GAMEPAD: &u8 = 0xF101;
const MUSIC_ENABLED: &bool = 0xF300;
const IN_GAME: &bool = 0xF301;
const PLACEMENT_ODD: &bool = 0xF302;

const NUM_EXHAUSTS: usize = 8;
const EXHAUST_DX: &[8]i32 = 0xEF00;
const EXHAUST_COLOR: &[8]u16 = 0xEF80;

const NUM_LAYERS: usize = 24;
const LAYER_CONTENT: &[16]u64 = 0xC500;

const DISTANCE_BETWEEN_LAYERS: usize = 12;

pub extern fn start()
{
	TIME = 0;
	DISTANCE = 0;
	COMBO_LEVEL = 0;
	BOOST_REMAINING = 0;
	BOOST_COOLDOWN = 0;
	SCORE = 0;
	COMBO = 0;
	PREVIOUS_GAMEPAD = 0;
	MUSIC_ENABLED = !true;
	IN_GAME = !true;
	PLACEMENT_ODD = !true;

	{
		var i = 0;
		{
			if i == NUM_EXHAUSTS
				goto end;
			i = i + 1;
			EXHAUST_COLOR[i] = 0;
			loop;
		}
		end:
	}

	{
		var i = 0;
		{
			if i == NUM_LAYERS
				goto end;
			i = i + 1;
			LAYER_CONTENT[i] = 0x0;
			loop;
		}
		end:
	}
}

fn update_menu()
{
	DRAW_COLORS = 0x44;
	rect(0, 0, SCREEN_SIZE, 100);

	draw_titlescreen_background(0, 60);

	DRAW_COLORS = 3;
	oval(68, 88, 24, 24);
	hline(0, 100, SCREEN_SIZE);

	DRAW_COLORS = 0x44;
	rect(0, 101, SCREEN_SIZE, SCREEN_SIZE - 101);

	reflect(100, 20, TIME);

	if MUSIC_ENABLED == true
	{
		play_title_theme(TIME, 100);
	}

	DRAW_COLORS = 1;
	text("It's Corn!", 40, 40);

	DRAW_COLORS = 1;
	text("X: START", 16, 130);
	if MUSIC_ENABLED == true
	{
		text("Z: MUSIC OFF", 16, 140);
	}
	else
	{
		text("Z: MUSIC ON", 16, 140);
	}

	var gamepad = GAMEPAD1;
	if gamepad & BUTTON_1 != 0
	{
		IN_GAME = true;
	}
	if gamepad & BUTTON_2 != 0
	{
		if PREVIOUS_GAMEPAD & BUTTON_2 == 0
		{
			MUSIC_ENABLED = !MUSIC_ENABLED;
		}
	}
}

fn update_score(got_point: bool)
{
	if got_point == false
	{
		COMBO = 0;
	}
	var thresholds: []u32 = [0, 1, 10, 25, 50, 100];
	var gains: []u32 = [1, 5, 10, 25, 50, 100];
	var i = 0;
	{
		if i == 5
			goto update;
		if COMBO < thresholds[i + 1]
			goto update;
		i = i + 1;
		loop;
	}
	update:
	COMBO_LEVEL = i;
	if got_point == true
	{
		if COMBO_LEVEL > 0
		{
			var correction = SCORE % 5;
			SCORE = SCORE - correction;
		}
		SCORE = SCORE + gains[COMBO_LEVEL];
		COMBO = COMBO + 1;
	}
}

fn draw_score(score: u32, x_of_right: i32, y: i32)
{
	var remainder = score;
	var x = x_of_right;
	var buffer: [1]u8 = [0x20];
	{
		x = x - 8;
		var decimal = remainder % 10;
		var c = 0x30;
		var d = 0;
		{
			if d == decimal
				goto print;
			c = c + 1;
			d = d + 1;
			loop;
		}
		print:
		buffer[0] = c;
		text(buffer, x, y);
		remainder = remainder / 10;
		if remainder == 0
			goto end;
		loop;
	}
	end:
}

fn draw_combo_level(y: i32)
{
	if COMBO_LEVEL >= 5
	{
		DRAW_COLORS = 3;
		text("CORNTASTIC!", 80 + 4 - 4 * 11 + 1, y);
		DRAW_COLORS = 1;
		text("CORNTASTIC!", 80 + 4 - 4 * 11, y);
	}
	else if COMBO_LEVEL >= 4
	{
		DRAW_COLORS = 1;
		text("Wonderful!", 80 + 4 - 4 * 10, y);
	}
	else if COMBO_LEVEL >= 3
	{
		DRAW_COLORS = 1;
		text("Amazing!", 80 + 4 - 4 * 8, y);
	}
	else if COMBO_LEVEL >= 2
	{
		DRAW_COLORS = 2;
		text("Great!", 80 + 4 - 4 * 6, y);
	}
	else if COMBO_LEVEL > 0
	{
		DRAW_COLORS = 3;
		text("Good!", 80 + 4 - 4 * 5, y);
	}
}

fn update_game()
{
	DRAW_COLORS = 0x44;
	rect(0, 0, SCREEN_SIZE, 60);

	DRAW_COLORS = 3;
	text("SCORE", 4, 12);
	draw_score(SCORE, 156, 12);
	text("COMBO", 4, 22);
	draw_score(COMBO, 156, 22);

	if COMBO_LEVEL > 0
	{
		draw_combo_level(36);
	}

	DRAW_COLORS = 0x33;
	rect(0, 60, SCREEN_SIZE, SCREEN_SIZE - 60);

	// Draw layers.
	{
		var new_addition = false;
		if DISTANCE / DISTANCE_BETWEEN_LAYERS > 0
		{
			new_addition = true;
		}
		if new_addition == true
		{
			var content = LAYER_CONTENT[NUM_LAYERS - 3];
			var mask = 0x0000000FF0000000;
			if content & mask != 0
			{
				update_score(true);
			}
			else
			{
				update_score(false);
			}
			LAYER_CONTENT[NUM_LAYERS - 3] = content & !mask;
		}
		var r = 0;
		{
			if LAYER_CONTENT[r] != 0
			{
				var content = LAYER_CONTENT[r];
				var x = 2;
				var revr = NUM_LAYERS - 1 - r;
				var scaled_distance = revr / 4;
				var real_distance = DISTANCE_BETWEEN_LAYERS * revr - DISTANCE;
				var max = DISTANCE_BETWEEN_LAYERS * NUM_LAYERS;
				var closeness = max - real_distance;
				var dy = 90 * closeness * closeness / max / max;
				var y = 57 + i32_from_usize(dy);
				var c: i32 = 0;
				var mask = 1 << 12;
				mask = mask << 40;
				{
					if c == 40
						goto end_of_row;
					mask = mask >> 1;
					if content & mask != 0
					{
						draw_corn(x, y, scaled_distance);
					}
					x = x + 4;
					c = c + 1;
					loop;
				}
				end_of_row:
			}
			r = r + 1;
			if r == NUM_LAYERS
				goto done_drawing;
			loop;
		}
		done_drawing:
		if new_addition == true
		{
			r = r - 1;
			if r == 0
			{
				var placement = 10;
				var offset = 11 + 2 * placement;
				if PLACEMENT_ODD == true
				{
					offset = offset + 1;
				}
				PLACEMENT_ODD = !PLACEMENT_ODD;
				offset = offset - 6;
				LAYER_CONTENT[r] = 0b1010101010101 << offset;
				goto done_adding;
			}
			LAYER_CONTENT[r] = LAYER_CONTENT[r - 1];
			loop;
		}
		done_adding:
		if new_addition == true
		{
			DISTANCE = DISTANCE % DISTANCE_BETWEEN_LAYERS;
		}
	}

	var gamepad = GAMEPAD1;
	if gamepad & BUTTON_2 != 0
	{
		if PREVIOUS_GAMEPAD & BUTTON_2 == 0
		{
			MUSIC_ENABLED = !MUSIC_ENABLED;
		}
	}

	if BOOST_REMAINING > 0
	{
		BOOST_REMAINING = BOOST_REMAINING - 1;
	}

	if BOOST_COOLDOWN == 0
	{
		if gamepad & BUTTON_1 != 0
		{
			if PREVIOUS_GAMEPAD & BUTTON_1 == 0
			{
				BOOST_REMAINING = 30;
				BOOST_COOLDOWN = 120;
			}
		}
	}
	else
	{
		BOOST_COOLDOWN = BOOST_COOLDOWN - 1;
	}

	var dx = 0;
	var alt = 0;
	var frame_offset = u32_from_usize(TIME / 9);
	var exhaust_dy = frame_offset % 2;
	if BOOST_REMAINING > 0
	{
		alt = 3;
		if BOOST_REMAINING > 10
		{
			frame_offset = 1;
			exhaust_dy = 2;
		}
		else
		{
			frame_offset = 0;
			exhaust_dy = 1;
		}
	}
	else if gamepad & BUTTON_LEFT != 0
	{
		dx = -1;
		alt = 1;
	}
	else if gamepad & BUTTON_RIGHT != 0
	{
		dx = 1;
		alt = 2;
	}

	DRAW_COLORS = 0x3210;
	var frame = 2 * alt + frame_offset % 2;
	draw_racer(80 + dx, 150, frame);

	// Draw exhausts.
	{
		var new_addition = false;
		if BOOST_REMAINING > 0
		{
			new_addition = true;
		}
		else if DISTANCE % 3 == 0
		{
			new_addition = true;
		}
		if new_addition == true
		{
			var color_offset = DISTANCE / 3;
			var new_color = 0;
			if BOOST_REMAINING > 10
			{
				new_color = 4;
			}
			else if color_offset % 6 == 0
			{
				new_color = 4;
			}
			EXHAUST_DX[0] = dx;
			EXHAUST_COLOR[0] = new_color;
		}
		var exhaust_frame = 8;
		var y = 150;
		var i = 0;
		{
			if i == NUM_EXHAUSTS
				goto done_drawing;
			if EXHAUST_COLOR[i] > 0
			{
				DRAW_COLORS = EXHAUST_COLOR[i] << 4;
				draw_racer(80 + EXHAUST_DX[i], y - exhaust_dy, exhaust_frame);
			}
			exhaust_dy = exhaust_dy - 1;
			y = y + 1;
			i = i + 1;
			loop;
		}
		done_drawing:
		if new_addition == true
		{
			var ddx = 0;
			i = i - 1;
			if i == 0
				goto done_adding;
			if i == 1
			{
				ddx = -dx;
			}
			EXHAUST_DX[i] = EXHAUST_DX[i - 1] + ddx;
			EXHAUST_COLOR[i] = EXHAUST_COLOR[i - 1];
			loop;
		}
		done_adding:
	}

	if BOOST_REMAINING > 0
	{
		DISTANCE = DISTANCE + 3;
	}
	else
	{
		DISTANCE = DISTANCE + 1;
	}
}

pub extern fn update()
{
	PALETTE[0] = 0x211e20;
	PALETTE[1] = 0x66605c;
	PALETTE[2] = 0xff924f;
	PALETTE[3] = 0xffd191;

	if IN_GAME == true
	{
		update_game();
	}
	else
	{
		update_menu();
	}

	// Enforce 160x144 letterbox of GBJAM.
	DRAW_COLORS = 0x11;
	rect(0, 0, SCREEN_SIZE, 8);
	rect(0, 152, SCREEN_SIZE, 8);

	// Advance time.
	TIME = TIME + 1;
	PREVIOUS_GAMEPAD = GAMEPAD1;
}
